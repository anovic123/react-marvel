{"version":3,"file":"static/js/812.cef7aab5.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/charSearchForm/CharSearchForm.js","components/errorBoundary/ErrorBoundary.js","components/pages/MainPage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js"],"sourcesContent":["import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n  return (\r\n    <img style={{ display: 'block', width: \"250px\", height: \"250px\",objectFit: 'contain', margin: \"0 auto\"}}  src={img} alt=\"Error\"/>\r\n  )\r\n}\r\n\r\nexport default ErrorMessage;","import { useState, useEffect } from 'react';\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n  const [char, setChar] = useState(null);\n  const { getCharacter, clearError, process, setProcess } = useMarvelService();\n\n  useEffect(() => {\n    updateChar();\n    const timerId = setInterval(updateChar, 60000);\n\n    return () => {\n      clearInterval(timerId);\n    };\n  }, []);\n\n  const onCharLoaded = (char) => {\n    setChar(char);\n  };\n\n  const updateChar = () => {\n    clearError();\n    const id = Math.floor(Math.random() * (1011400 - 1011000)) + 1011000;\n\n    getCharacter(id)\n      .then(onCharLoaded)\n      .then(() => setProcess('confirmed'));\n  };\n\n  return (\n    <div className=\"randomchar\">\n      {setContent(process, View, char)}\n      <div className=\"randomchar__static\">\n        <p className=\"randomchar__title\">\n          Random character for today!\n          <br />\n          Do you want to get to know him better?\n        </p>\n        <p className=\"randomchar__title\">Or choose another one</p>\n        <button onClick={updateChar} className=\"button button__main\">\n          <div className=\"inner\">try it</div>\n        </button>\n        <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\n      </div>\n    </div>\n  );\n};\n\nconst View = ({ data }) => {\n  const { name, description, thumbnail, homepage, wiki } = data;\n  let imgStyle = { objectFit: 'cover' };\n  if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n    imgStyle = { objectFit: 'contain' };\n  }\n\n  return (\n    <div className=\"randomchar__block\">\n      <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle} />\n      <div className=\"randomchar__info\">\n        <p className=\"randomchar__name\">{name}</p>\n        <p className=\"randomchar__descr\">{description}</p>\n        <div className=\"randomchar__btns\">\n          <a href={homepage} className=\"button button__main\">\n            <div className=\"inner\">homepage</div>\n          </a>\n          <a href={wiki} className=\"button button__secondary\">\n            <div className=\"inner\">Wiki</div>\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RandomChar;\n","import React from 'react';\nimport { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\n\nimport './charList.scss';\n\nconst setContent = (process, Component, newItemLoading) => {\n  switch (process) {\n    case 'waiting':\n      return <Spinner />;\n    case 'loading':\n      return newItemLoading ? <Component /> : <Spinner />;\n    case 'confirmed':\n      return <Component />;\n    case 'error':\n      return <ErrorMessage />;\n    default:\n      throw new Error('Unexpected process state');\n  }\n};\n\nconst CharList = (props) => {\n  const [charList, setCharList] = useState([]);\n  const [newItemLoading, setNewItemLoading] = useState(false);\n  const [offset, setOffset] = useState(210);\n  const [charEnded, setCharEnded] = useState(false);\n\n  const { getAllCharacters, process, setProcess } = useMarvelService();\n\n  useEffect(() => {\n    onRequest(offset, true);\n  }, []);\n\n  const onRequest = (offset, initial) => {\n    initial ? setNewItemLoading(false) : setNewItemLoading(true);\n    getAllCharacters(offset)\n      .then(onCharListLoaded)\n      .then(() => setProcess('confirmed'));\n  };\n\n  const onCharListLoaded = (newCharList) => {\n    let ended = false;\n    if (newCharList.length < 9) {\n      ended = true;\n    }\n\n    setCharList((charList) => [...charList, ...newCharList]);\n    setNewItemLoading(false);\n    setOffset((offset) => offset + 9);\n    setCharEnded(ended);\n  };\n\n  const itemRefs = useRef([]);\n\n  const focusOnItem = (id) => {\n    itemRefs.current.forEach((item) => item.classList.remove('char__item_selected'));\n    itemRefs.current[id].classList.add('char__item_selected');\n    itemRefs.current[id].focus();\n  };\n\n  // Этот метод создан для оптимизации,\n  // чтобы не помещать такую конструкцию в метод render\n  function renderItems(arr) {\n    const items = arr.map((item, i) => {\n      let imgStyle = { objectFit: 'cover' };\n      if (\n        item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg'\n      ) {\n        imgStyle = { objectFit: 'unset' };\n      }\n\n      return (\n        <CSSTransition key={item.id} timeout={500} className=\"char__item\">\n          <li\n            className=\"char__item\"\n            tabIndex={0}\n            ref={(el) => (itemRefs.current[i] = el)}\n            key={item.id}\n            onClick={() => {\n              props.onCharSelected(item.id);\n              focusOnItem(i);\n            }}\n            onKeyPress={(e) => {\n              if (e.key === ' ' || e.key === 'Enter') {\n                props.onCharSelected(item.id);\n                focusOnItem(i);\n              }\n            }}\n          >\n            <img src={item.thumbnail} alt={item.name} style={imgStyle} />\n            <div className=\"char__name\">{item.name}</div>\n          </li>\n        </CSSTransition>\n      );\n    });\n    // А эта конструкция вынесена для центровки спиннера/ошибки\n    return (\n      <ul className=\"char__grid\">\n        <TransitionGroup component={null}>{items}</TransitionGroup>\n      </ul>\n    );\n  }\n\n  const elements = React.useMemo(() => {\n    return setContent(process, () => renderItems(charList), newItemLoading);\n  }, [process])\n\n  return (\n    <div className=\"char__list\">\n      {elements}\n      <button\n        disabled={newItemLoading}\n        style={{ display: charEnded ? 'none' : 'block' }}\n        className=\"button button__main button__long\"\n        onClick={() => onRequest(offset)}\n      >\n        <div className=\"inner\">load more</div>\n      </button>\n    </div>\n  );\n};\n\nCharList.propTypes = {\n  onCharSelected: PropTypes.func.isRequired,\n};\n\nexport default CharList;\n","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\n\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n  const [char, setChar] = useState(null);\n\n  const { getCharacter, clearError, process, setProcess } = useMarvelService();\n  useEffect(() => {\n    updateChar();\n  }, [props.charId]);\n\n  const updateChar = () => {\n    const { charId } = props;\n    if (!charId) {\n      return;\n    }\n\n    clearError();\n    getCharacter(charId)\n      .then(onCharLoaded)\n      .then(() => setProcess('confirmed'));\n  };\n\n  const onCharLoaded = (char) => {\n    setChar(char);\n  };\n\n  return <div className=\"char__info\">{setContent(process, View, char)}</div>;\n};\n\nconst View = ({ data }) => {\n  const { name, description, thumbnail, homepage, wiki, comics } = data;\n\n  let imgStyle = { objectFit: 'cover' };\n  if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n    imgStyle = { objectFit: 'contain' };\n  }\n  return (\n    <>\n      <div className=\"char__basics\">\n        <img src={thumbnail} alt={name} style={imgStyle} />\n        <div>\n          <div className=\"char__info-name\">{name}</div>\n          <div className=\"char__btns\">\n            <a href={homepage} className=\"button button__main\">\n              <div className=\"inner\">homepage</div>\n            </a>\n            <a href={wiki} className=\"button button__secondary\">\n              <div className=\"inner\">Wiki</div>\n            </a>\n          </div>\n        </div>\n      </div>\n      <div className=\"char__descr\">{description}</div>\n      <div className=\"char__comics\">Comics:</div>\n      <ul className=\"char__comics-list\">\n        {comics.length > 0 ? null : 'There is no comics with this character'}\n        {comics.map((item, i) => {\n          if (i > 9) return;\n          return (\n            <li key={i} className=\"char__comics-item\">\n              {item.name}\n            </li>\n          );\n        })}\n      </ul>\n    </>\n  );\n};\n\nCharInfo.propTypes = {\n  charId: PropTypes.number,\n};\n\nexport default CharInfo;\n","import { useState } from 'react';\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './charSearchForm.scss';\r\n\r\nconst CharSearchForm = () => {\r\n  const [char, setChar] = useState(null);\r\n  const { getCharacterByName, clearError, process, setProcess } = useMarvelService();\r\n\r\n  const onCharLoaded = (char) => {\r\n    setChar(char);\r\n  };\r\n\r\n  const updateChar = (name) => {\r\n    clearError();\r\n\r\n    getCharacterByName(name)\r\n      .then(onCharLoaded)\r\n      .then(() => setProcess('confirmed'));\r\n  };\r\n\r\n  const errorMessage =\r\n    process === 'error' ? (\r\n      <div className=\"char__search-critical-error\">\r\n        <ErrorMessage />\r\n      </div>\r\n    ) : null;\r\n\r\n  const results = !char ? null : char.length > 0 ? (\r\n    <div className=\"char__search-wrapper\">\r\n      <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n      <Link to={`../react-marvel/characters/${char[0].id}`} className=\"button button__secondary\">\r\n        <div className=\"inner\">To page</div>\r\n      </Link>\r\n    </div>\r\n  ) : (\r\n    <div className=\"char__search-error\">\r\n      The character was not found. Check the name and try again\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"char__search-form\">\r\n      <Formik\r\n        initialValues={{\r\n          charName: '',\r\n        }}\r\n        validationSchema={Yup.object({\r\n          charName: Yup.string().required('This field is required'),\r\n        })}\r\n        onSubmit={({ charName }) => {\r\n          updateChar(charName);\r\n        }}\r\n      >\r\n        <Form>\r\n          <label className=\"char__search-label\" htmlFor=\"charName\">\r\n            Or find a character by name:\r\n          </label>\r\n          <div className=\"char__search-wrapper\">\r\n            <Field id=\"charName\" name=\"charName\" type=\"text\" placeholder=\"Enter name\" />\r\n            <button type=\"submit\" className=\"button button__main\" disabled={process === 'loading'}>\r\n              <div className=\"inner\">find</div>\r\n            </button>\r\n          </div>\r\n          <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n        </Form>\r\n      </Formik>\r\n      {results}\r\n      {errorMessage}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CharSearchForm;\r\n","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n state = {\r\n  error : false\r\n }\r\n\r\n componentDidCatch(error, errorInfo) {\r\n  console.log(error, errorInfo);\r\n  this.setState({\r\n   error: true\r\n  })\r\n }\r\n\r\n render() {\r\n  if (this.state.error) {\r\n   return <ErrorMessage />\r\n  }\r\n\r\n  return this.props.children;\r\n }\r\n\r\n}       \r\n\r\nexport default ErrorBoundary;","import { useState } from 'react';\r\nimport { Helmet } from 'react-helmet';\r\n\r\nimport RandomChar from '../randomChar/RandomChar';\r\nimport CharList from '../charList/CharList';\r\nimport CharInfo from '../charInfo/CharInfo';\r\nimport CharSearchForm from '../charSearchForm/CharSearchForm';\r\nimport ErrorBoundary from '../errorBoundary/ErrorBoundary';\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n  const [selectedChar, setChar] = useState(null);\r\n\r\n  const onCharSelected = (id) => {\r\n    setChar(id);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <meta name=\"description\" content=\"Marvel information portal\" />\r\n        <title>Marvel information portal</title>\r\n      </Helmet>\r\n      <ErrorBoundary>\r\n        <RandomChar />\r\n      </ErrorBoundary>\r\n      <div className=\"char__content\">\r\n        <ErrorBoundary>\r\n          <CharList onCharSelected={onCharSelected} />\r\n        </ErrorBoundary>\r\n        <div>\r\n          <ErrorBoundary>\r\n            <CharInfo charId={selectedChar} />\r\n          </ErrorBoundary>\r\n          <ErrorBoundary>\r\n            <CharSearchForm />\r\n          </ErrorBoundary>\r\n        </div>\r\n      </div>\r\n      <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MainPage;\r\n","import { useHttp } from '../hooks/http.hook';\r\n\r\nconst useMarvelService = () => {\r\n  const { request, clearError, process, setProcess } = useHttp();\r\n\r\n  const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n\r\n  const _apiKey = 'apikey=0111fb3cca80a991505546a53520cde3';\r\n  const _baseOffset = 210;\r\n\r\n  const getAllCharacters = async (offset = _baseOffset) => {\r\n    const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n    return res.data.results.map(_transformCharacter);\r\n  };\r\n\r\n  const getCharacterByName = async (name) => {\r\n    const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n    return res.data.results.map(_transformCharacter);\r\n  };\r\n\r\n  const getCharacter = async (id) => {\r\n    const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n    return _transformCharacter(res.data.results[0]);\r\n  };\r\n\r\n  const getAllComics = async (offset = 0) => {\r\n    const res = await request(\r\n      `${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`,\r\n    );\r\n    return res.data.results.map(_transfromComics);\r\n  };\r\n\r\n  const getComic = async (id) => {\r\n    const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n    return _transfromComics(res.data.results[0]);\r\n  };\r\n\r\n  const _transformCharacter = (char) => {\r\n    return {\r\n      id: char.id,\r\n      name: char.name,\r\n      description: char.description\r\n        ? `${char.description.slice(0, 210)}...`\r\n        : 'There is no description for this character',\r\n      thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n      homepage: char.urls[0].url,\r\n      wiki: char.urls[1].url,\r\n      comics: char.comics.items,\r\n    };\r\n  };\r\n\r\n  const _transfromComics = (comics) => {\r\n    return {\r\n      id: comics.id,\r\n      title: comics.title,\r\n      description: comics.description || 'There is no description',\r\n      pageCount: comics.pageCount\r\n        ? `${comics.pageCount} p.`\r\n        : `No information about the number of pages`,\r\n      thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n      language: comics.textObjects.language || 'en-us',\r\n      price: comics.prices.price ? `${comics.prices.price}$` : 'not available',\r\n    };\r\n  };\r\n\r\n  return {\r\n    clearError,\r\n    process,\r\n    setProcess,\r\n    getAllCharacters,\r\n    getCharacterByName,\r\n    getCharacter,\r\n    getAllComics,\r\n    getComic,\r\n  };\r\n};\r\n\r\nexport default useMarvelService;\r\n","import {useState, useCallback} from \"react\";\r\n\r\nexport const useHttp = () => {\r\n  const [process, setProcess] = useState('waiting');\r\n\r\n const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n\r\n   setProcess('loading');\r\n\r\n   try {\r\n    const response = await fetch(url, {method, body, headers})\r\n\r\n    if (!response.ok) {\r\n     throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n    }\r\n\r\n    const data = await response.json();\r\n\r\n    return data;\r\n   } catch(e) {\r\n    setProcess('error');\r\n    throw e;\r\n   }\r\n }, []);\r\n\r\n const clearError = useCallback(() => setProcess('loading'), []);\r\n\r\n return {request, clearError, process, setProcess}\r\n}","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from '../components/spinner/Spinner';\r\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\r\nimport Skeleton from '../components/skeleton/Skeleton';\r\n\r\nconst setContent = (process, Component, data) => {\r\n  switch (process) {\r\n    case 'waiting':\r\n      return <Skeleton />;\r\n    case 'loading':\r\n      return <Spinner />;\r\n    case 'confirmed':\r\n      return <Component data={data} />;\r\n    case 'error':\r\n      return <ErrorMessage />;\r\n    default:\r\n      throw new Error('Unexpected process state');\r\n  }\r\n};\r\n\r\nexport default setContent;\r\n"],"names":["style","display","width","height","objectFit","margin","src","img","alt","View","data","name","description","thumbnail","homepage","wiki","imgStyle","className","href","useState","char","setChar","useMarvelService","getCharacter","clearError","process","setProcess","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","setContent","onClick","mjolnir","props","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","length","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","elements","React","Component","Spinner","ErrorMessage","Error","arr","items","map","i","CSSTransition","timeout","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","TransitionGroup","component","renderItems","disabled","comics","charId","getCharacterByName","errorMessage","results","to","initialValues","charName","validationSchema","Yup","required","onSubmit","htmlFor","type","placeholder","ErrorBoundary","state","error","errorInfo","console","log","this","setState","children","selectedChar","Helmet","content","decoration","request","useCallback","url","method","body","headers","fetch","response","ok","status","json","useHttp","_apiBase","_apiKey","res","_transformCharacter","getAllComics","_transfromComics","getComic","slice","path","extension","urls","title","pageCount","language","textObjects","price","prices"],"sourceRoot":""}