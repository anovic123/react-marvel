{"version":3,"file":"static/js/682.07ade558.chunk.js","mappings":"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","sources":["components/appBanner/AppBanner.js","components/errorMessage/ErrorMessage.js","components/comicsList/ComicsList.js","components/pages/ComicsPage.js","services/MarvelService.js","hooks/http.hook.js"],"sourcesContent":["import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n  return (\r\n    <img style={{ display: 'block', width: \"250px\", height: \"250px\",objectFit: 'contain', margin: \"0 auto\"}}  src={img} alt=\"Error\"/>\r\n  )\r\n}\r\n\r\nexport default ErrorMessage;","import { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Spinner from '../spinner/Spinner';\nimport useMarvelService from '../../services/MarvelService';\n\nimport './comicsList.scss';\nimport { render } from '@testing-library/react';\n\nconst setContent = (process, Component, newItemLoading) => {\n  switch (process) {\n    case 'waiting':\n      return <Spinner />;\n    case 'loading':\n      return newItemLoading ? <Component /> : <Spinner />;\n    case 'confirmed':\n      return <Component />;\n    case 'error':\n      return <ErrorMessage />;\n    default:\n      throw new Error('Unexpected process state');\n  }\n};\n\nconst ComicsList = () => {\n  const [comicsList, setComicsList] = useState([]);\n  const [newItemLoading, setNewItemLoading] = useState(false);\n  const [offset, setOffset] = useState(0);\n  const [comicsEnded, setComicsEnded] = useState(false);\n\n  const { getAllComics, process, setProcess } = useMarvelService();\n\n  useEffect(() => {\n    onRequest(offset, true);\n  }, []);\n\n  const onRequest = (offset, initial) => {\n    initial ? setNewItemLoading(false) : setNewItemLoading(true);\n    getAllComics(offset)\n      .then(onComicsListLoaded)\n      .then(() => setProcess('confirmed'));\n  };\n\n  const onComicsListLoaded = (newComicsList) => {\n    let ended = false;\n    if (newComicsList.length < 8) {\n      ended = true;\n    }\n    setComicsList([...comicsList, ...newComicsList]);\n    setNewItemLoading(false);\n    setOffset(offset + 8);\n    setComicsEnded(ended);\n  };\n\n  function renderItems(arr) {\n    const items = arr.map((item) => {\n      return (\n        <li className=\"comics__item\" key={item.id}>\n          <Link to={`../react-marvel/comics/${item.id}`}>\n            <img src={item.thumbnail} alt={item.title} className=\"comics__item-img\" />\n            <div className=\"comics__item-name\">{item.title}</div>\n            <div className=\"comics__item-price\">{item.price}</div>\n          </Link>\n        </li>\n      );\n    });\n\n    return <ul className=\"comics__grid\">{items}</ul>;\n  }\n\n  return (\n    <div className=\"comics__list\">\n      {setContent(process, () => renderItems(comicsList), newItemLoading)}\n      <button\n        disabled={newItemLoading}\n        style={{ display: comicsEnded ? 'none' : 'block' }}\n        className=\"button button__main button__long\"\n        onClick={() => onRequest(offset)}\n      >\n        <div className=\"inner\">load more</div>\n      </button>\n    </div>\n  );\n};\n\nexport default ComicsList;\n","import React from 'react';\r\nimport Helmet from 'react-helmet';\r\n\r\nimport ComicsList from '../comicsList/ComicsList';\r\nimport AppBanner from '../appBanner/AppBanner';\r\n\r\nconst ComicsPage = () => {\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <meta name=\"description\" content=\"Page with list of our comics\" />\r\n        <title>Comics Page</title>\r\n      </Helmet>\r\n      <AppBanner />\r\n      <ComicsList />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ComicsPage;\r\n","import { useHttp } from '../hooks/http.hook';\r\n\r\nconst useMarvelService = () => {\r\n  const { request, clearError, process, setProcess } = useHttp();\r\n\r\n  const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n\r\n  const _apiKey = 'apikey=0111fb3cca80a991505546a53520cde3';\r\n  const _baseOffset = 210;\r\n\r\n  const getAllCharacters = async (offset = _baseOffset) => {\r\n    const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n    return res.data.results.map(_transformCharacter);\r\n  };\r\n\r\n  const getCharacterByName = async (name) => {\r\n    const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n    return res.data.results.map(_transformCharacter);\r\n  };\r\n\r\n  const getCharacter = async (id) => {\r\n    const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n    return _transformCharacter(res.data.results[0]);\r\n  };\r\n\r\n  const getAllComics = async (offset = 0) => {\r\n    const res = await request(\r\n      `${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`,\r\n    );\r\n    return res.data.results.map(_transfromComics);\r\n  };\r\n\r\n  const getComic = async (id) => {\r\n    const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n    return _transfromComics(res.data.results[0]);\r\n  };\r\n\r\n  const _transformCharacter = (char) => {\r\n    return {\r\n      id: char.id,\r\n      name: char.name,\r\n      description: char.description\r\n        ? `${char.description.slice(0, 210)}...`\r\n        : 'There is no description for this character',\r\n      thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n      homepage: char.urls[0].url,\r\n      wiki: char.urls[1].url,\r\n      comics: char.comics.items,\r\n    };\r\n  };\r\n\r\n  const _transfromComics = (comics) => {\r\n    return {\r\n      id: comics.id,\r\n      title: comics.title,\r\n      description: comics.description || 'There is no description',\r\n      pageCount: comics.pageCount\r\n        ? `${comics.pageCount} p.`\r\n        : `No information about the number of pages`,\r\n      thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n      language: comics.textObjects.language || 'en-us',\r\n      price: comics.prices.price ? `${comics.prices.price}$` : 'not available',\r\n    };\r\n  };\r\n\r\n  return {\r\n    clearError,\r\n    process,\r\n    setProcess,\r\n    getAllCharacters,\r\n    getCharacterByName,\r\n    getCharacter,\r\n    getAllComics,\r\n    getComic,\r\n  };\r\n};\r\n\r\nexport default useMarvelService;\r\n","import {useState, useCallback} from \"react\";\r\n\r\nexport const useHttp = () => {\r\n  const [process, setProcess] = useState('waiting');\r\n\r\n const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n\r\n   setProcess('loading');\r\n\r\n   try {\r\n    const response = await fetch(url, {method, body, headers})\r\n\r\n    if (!response.ok) {\r\n     throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n    }\r\n\r\n    const data = await response.json();\r\n\r\n    return data;\r\n   } catch(e) {\r\n    setProcess('error');\r\n    throw e;\r\n   }\r\n }, []);\r\n\r\n const clearError = useCallback(() => setProcess('loading'), []);\r\n\r\n return {request, clearError, process, setProcess}\r\n}"],"names":["className","src","avengers","alt","avengersLogo","style","display","width","height","objectFit","margin","img","setContent","process","Component","newItemLoading","Spinner","ErrorMessage","Error","useState","comicsList","setComicsList","setNewItemLoading","offset","setOffset","comicsEnded","setComicsEnded","useMarvelService","getAllComics","setProcess","useEffect","onRequest","initial","then","onComicsListLoaded","newComicsList","ended","length","arr","items","map","item","to","id","thumbnail","title","price","renderItems","disabled","onClick","Helmet","name","content","AppBanner","request","useCallback","url","method","body","headers","fetch","response","ok","status","json","data","clearError","useHttp","_apiBase","_apiKey","getAllCharacters","res","results","_transformCharacter","getCharacterByName","getCharacter","_transfromComics","getComic","char","description","slice","path","extension","homepage","urls","wiki","comics","pageCount","language","textObjects","prices"],"sourceRoot":""}